AWSTemplateFormatVersion: 2010-09-09

Description: This template creates vpc with public and private subnets

# Metadata:

Parameters:
 vpcCIDR:
   Default: 10.0.0.0/16
   Description: Please enter the IP range (CIDR notation) for this VPC
   Type: String 

 PublicSubnet1CIDR:
   Default: 10.0.0.0/24
   Description: Please enter the IP range (CIDR notation) for the public subnet 1
   Type: String 

 PublicSubnet2CIDR:
   Default: 10.0.1.0/24
   Description: Please enter the IP range (CIDR notation) for the publice subnet 2
   Type: String

 PrivateSubnet1CIDR:
   Default: 10.0.2.0/24
   Description: Please enter the IP range (CIDR notation) for the private subnet 1
   Type: String

 PrivateSubnet2CIDR:
   Default: 10.0.3.0/24
   Description: Please enter the IP range (CIDR notation) for the private subnet 2
   Type: String

 PrivateSubnet3CIDR:
   Default: 10.0.4.0/24
   Description: Please enter the IP range (CIDR notation) for the private subnet 3
   Type: String

 PrivateSubnet4CIDR:
   Default: 10.0.5.0/24
   Description: Please enter the IP range (CIDR notation) for the private subnet 4
   Type: String

 SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server using SSH.
    MaxLength: 18
    MinLength: 9
    Type: String

Mappings:
  RegionMap:
    us-east-1:
      AMI: ami-0b0dcb5067f052a63
    us-west-1:
      AMI: ami-0f5e8a042c8bfcd5e
    us-east-2:
      AMI: ami-0beaa649c482330f7
    us-west-2:
      AMI: ami-094125af156557ca2     
    eu-west-1:
      AMI: ami-01cae1550c0adea9c
    ap-southeast-1:
      AMI: ami-0af2f764c580cc1f9
    ap-southeast-2:
      AMI: ami-06bb074d1e196d0d4
    ap-south-1:
      AMI: ami-074dc0a6f6c764218
    ca-central-1:
      AMI: ami-0ee679ef733e3b8e7
    eu-central-1:
      AMI: ami-076309742d466ad69
    eu-west-2:
      AMI: ami-04706e771f950937f
    eu-west-3:
      AMI: ami-0f15e0a4c8d3ee5fe
    eu-north-1:
      AMI: ami-02aeff1a953c5c2ff
    sa-east-1:
      AMI: ami-0b7101e993ea27f3a
      
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: Test VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Test IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1
      VpcId: !Ref VPC

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Public Route Table
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 1 | App Tier
      VpcId: !Ref VPC


  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 2 | App Tier
      VpcId: !Ref VPC


  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 3 | Database Tier
      VpcId: !Ref VPC


  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet4CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private Subnet 4 | Database Tier
      VpcId: !Ref VPC

  SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH Security Group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: SSH Security Group
      VpcId: !Ref VPC

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP/HTTPS access via port 80/443 locked down to the load balancer SG + SSH access via port 22 locked down SSH SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: WebServer Security Group
      VpcId: !Ref VPC

  DataBaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref SSHSecurityGroup
      Tags:
        - Key: Name
          Value: DataBase Security Group
      VpcId: !Ref VPC

  jumpBox:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-1853ac65
      Tags:
        - Key: Name
          Value: "Bastion Host"
      KeyName: jumpbox
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: 0
          GroupSet:
            - Ref: SSHSecurityGroup
          SubnetId: !Ref PublicSubnet1

  webserver:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-1853ac65
      Tags:
        - Key: Name
          Value: "webserver"
      KeyName: webserver
      NetworkInterfaces:
        - AssociatePublicIpAddress: "false"
          DeviceIndex: 0
          GroupSet:
            - Ref: WebServerSecurityGroup
          SubnetId: !Ref PrivateSubnet1

  RDSDBSubnetGroup:
         Type: AWS::RDS::DBSubnetGroup
         Properties: 
           DBSubnetGroupDescription: Data base in private Subnet
           DBSubnetGroupName: RDS Subnet
           SubnetIds: 
             - !Ref PrivateSubnet3
             - !Ref PrivateSubnet4

  RDSDBInstance:
        Type: AWS::RDS::DBInstance
        Properties:
          AllocatedStorage: 20
          DBInstanceClass: db.t3.micro
          DBName: MyDBName
          VPCSecurityGroups: 
            - !Ref DataBaseSecurityGroup
          DBSubnetGroupName: !Ref RDSDBSubnetGroup
          Engine: MySQL
          MasterUsername: ankush
          MasterUserPassword: ankush123
   

# Outputs:
